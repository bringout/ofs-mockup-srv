#!/usr/bin/env python3
"""
Windows-Compatible NextCloud Upload Utility
Handles environment variables and command execution reliably on Windows.
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def set_environment_and_run(nc_user, nc_api_key, script_args):
    """
    Set environment variables and run the push_to_nextcloud.py script
    in a way that works reliably on Windows.
    """
    # Set environment variables in current process
    os.environ['NC_USER'] = nc_user
    os.environ['NC_API_KEY'] = nc_api_key
    
    # Import and run the main script
    script_dir = Path(__file__).parent
    sys.path.insert(0, str(script_dir))
    
    try:
        from push_to_nextcloud import main
        
        # Set sys.argv to simulate command line arguments
        original_argv = sys.argv.copy()
        sys.argv = ['push_to_nextcloud.py'] + script_args
        
        # Run the main function
        result = main()
        
        # Restore original argv
        sys.argv = original_argv
        
        return result
        
    except ImportError as e:
        print(f"Error importing push_to_nextcloud: {e}", file=sys.stderr)
        return 1
    except Exception as e:
        print(f"Error running upload script: {e}", file=sys.stderr)
        return 1


def create_batch_wrapper(nc_user, nc_api_key, script_args, batch_name="upload_to_nextcloud.bat"):
    """
    Create a Windows batch file that sets environment variables and runs the script.
    This is useful for running from Windows command prompt or batch scripts.
    """
    script_dir = Path(__file__).parent.parent  # Go up to project root
    batch_path = script_dir / batch_name
    
    batch_content = f"""@echo off
REM NextCloud Upload Batch Script
REM Auto-generated by nextcloud_upload_windows.py

set NC_USER={nc_user}
set NC_API_KEY={nc_api_key}

echo Setting NextCloud credentials...
echo NC_USER=%NC_USER%
echo NC_API_KEY=[HIDDEN]

echo Running NextCloud upload script...
python scripts\\push_to_nextcloud.py {' '.join(script_args)}

if %ERRORLEVEL% EQU 0 (
    echo Upload completed successfully!
) else (
    echo Upload failed with error code %ERRORLEVEL%
)

pause
"""
    
    try:
        batch_path.write_text(batch_content, encoding='utf-8')
        print(f"Created batch file: {batch_path}")
        print(f"You can now run: {batch_name}")
        return str(batch_path)
    except Exception as e:
        print(f"Error creating batch file: {e}", file=sys.stderr)
        return None


def create_powershell_wrapper(nc_user, nc_api_key, script_args, ps1_name="upload_to_nextcloud.ps1"):
    """
    Create a PowerShell script that sets environment variables and runs the upload.
    """
    script_dir = Path(__file__).parent.parent  # Go up to project root
    ps1_path = script_dir / ps1_name
    
    ps1_content = f"""# NextCloud Upload PowerShell Script
# Auto-generated by nextcloud_upload_windows.py

Write-Host "Setting NextCloud credentials..." -ForegroundColor Green
$env:NC_USER = "{nc_user}"
$env:NC_API_KEY = "{nc_api_key}"

Write-Host "NC_USER: $env:NC_USER" -ForegroundColor Yellow
Write-Host "NC_API_KEY: [HIDDEN]" -ForegroundColor Yellow

Write-Host "Running NextCloud upload script..." -ForegroundColor Green
python scripts\\push_to_nextcloud.py {' '.join(script_args)}

if ($LASTEXITCODE -eq 0) {{
    Write-Host "Upload completed successfully!" -ForegroundColor Green
}} else {{
    Write-Host "Upload failed with error code $LASTEXITCODE" -ForegroundColor Red
}}

Write-Host "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
"""
    
    try:
        ps1_path.write_text(ps1_content, encoding='utf-8')
        print(f"Created PowerShell script: {ps1_path}")
        print(f"You can now run: powershell -ExecutionPolicy Bypass -File {ps1_name}")
        return str(ps1_path)
    except Exception as e:
        print(f"Error creating PowerShell script: {e}", file=sys.stderr)
        return None


def main():
    """Main function with argument parsing"""
    parser = argparse.ArgumentParser(
        description="Windows-compatible NextCloud upload utility",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Upload wheelhouse directly
  python scripts/nextcloud_upload_windows.py --wheelhouse
  
  # Upload regular wheel
  python scripts/nextcloud_upload_windows.py --wheel
  
  # Create batch file for wheelhouse upload
  python scripts/nextcloud_upload_windows.py --wheelhouse --create-batch
  
  # Create PowerShell script for wheel upload  
  python scripts/nextcloud_upload_windows.py --wheel --create-powershell
  
  # Use custom credentials
  python scripts/nextcloud_upload_windows.py --wheelhouse --user myuser --api-key mykey
        """
    )
    
    # Credentials
    parser.add_argument('--user', default='hernad',
                       help='NextCloud username (default: hernad)')
    parser.add_argument('--api-key', default='HrCjG-jRpJy-QGErA-dKtri-mZH4k',
                       help='NextCloud API key (default: hardcoded)')
    
    # Upload options
    parser.add_argument('--wheel', action='store_true',
                       help='Upload wheel package (default if no other option specified)')
    parser.add_argument('--wheelhouse', action='store_true',
                       help='Upload Windows wheelhouse zip')
    parser.add_argument('--dry-run', action='store_true',
                       help='Build but don\'t upload (testing)')
    parser.add_argument('--verbose', action='store_true',
                       help='Enable verbose output')
    parser.add_argument('--download', action='store_true',
                       help='Download file back after upload')
    
    # Script generation options
    parser.add_argument('--create-batch', action='store_true',
                       help='Create Windows batch file instead of running directly')
    parser.add_argument('--create-powershell', action='store_true',
                       help='Create PowerShell script instead of running directly')
    parser.add_argument('--batch-name', default='upload_to_nextcloud.bat',
                       help='Name for generated batch file')
    parser.add_argument('--ps1-name', default='upload_to_nextcloud.ps1',
                       help='Name for generated PowerShell script')
    
    args = parser.parse_args()
    
    # Determine what to upload
    script_args = []
    
    if args.wheelhouse:
        script_args.append('--wheelhouse')
    elif args.wheel or not args.wheelhouse:
        script_args.append('--wheel')
    
    if args.dry_run:
        script_args.append('--dry-run')
    if args.verbose:
        script_args.append('--verbose')
    if args.download:
        script_args.append('--download')
    
    # Handle script generation
    if args.create_batch:
        batch_path = create_batch_wrapper(args.user, args.api_key, script_args, args.batch_name)
        return 0 if batch_path else 1
    
    if args.create_powershell:
        ps1_path = create_powershell_wrapper(args.user, args.api_key, script_args, args.ps1_name)
        return 0 if ps1_path else 1
    
    # Run directly
    print("Windows NextCloud Upload Utility")
    print("=" * 40)
    print(f"User: {args.user}")
    print(f"Upload type: {'wheelhouse' if args.wheelhouse else 'wheel'}")
    print(f"Script args: {' '.join(script_args)}")
    print()
    
    return set_environment_and_run(args.user, args.api_key, script_args)


if __name__ == "__main__":
    sys.exit(main())